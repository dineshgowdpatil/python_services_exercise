/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.altran.reservation.thrift.impl;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-02-24")
public class ReservationNotification implements org.apache.thrift.TBase<ReservationNotification, ReservationNotification._Fields>, java.io.Serializable, Cloneable, Comparable<ReservationNotification> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReservationNotification");

  private static final org.apache.thrift.protocol.TField RID_FIELD_DESC = new org.apache.thrift.protocol.TField("rid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EMAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("emailId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHECK_IN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("checkInTime", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CHECK_OUT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("checkOutTime", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONFIRMED_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmed", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField SLOT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("slotList", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReservationNotificationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReservationNotificationTupleSchemeFactory();

  public int rid; // required
  public @org.apache.thrift.annotation.Nullable String emailId; // required
  public int checkInTime; // required
  public int checkOutTime; // required
  public @org.apache.thrift.annotation.Nullable String city; // required
  public boolean confirmed; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<Slot> slotList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RID((short)1, "rid"),
    EMAIL_ID((short)2, "emailId"),
    CHECK_IN_TIME((short)3, "checkInTime"),
    CHECK_OUT_TIME((short)4, "checkOutTime"),
    CITY((short)5, "city"),
    CONFIRMED((short)6, "confirmed"),
    SLOT_LIST((short)7, "slotList");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RID
          return RID;
        case 2: // EMAIL_ID
          return EMAIL_ID;
        case 3: // CHECK_IN_TIME
          return CHECK_IN_TIME;
        case 4: // CHECK_OUT_TIME
          return CHECK_OUT_TIME;
        case 5: // CITY
          return CITY;
        case 6: // CONFIRMED
          return CONFIRMED;
        case 7: // SLOT_LIST
          return SLOT_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RID_ISSET_ID = 0;
  private static final int __CHECKINTIME_ISSET_ID = 1;
  private static final int __CHECKOUTTIME_ISSET_ID = 2;
  private static final int __CONFIRMED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RID, new org.apache.thrift.meta_data.FieldMetaData("rid", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("emailId", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_IN_TIME, new org.apache.thrift.meta_data.FieldMetaData("checkInTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK_OUT_TIME, new org.apache.thrift.meta_data.FieldMetaData("checkOutTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIRMED, new org.apache.thrift.meta_data.FieldMetaData("confirmed", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SLOT_LIST, new org.apache.thrift.meta_data.FieldMetaData("slotList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Slot.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReservationNotification.class, metaDataMap);
  }

  public ReservationNotification() {
  }

  public ReservationNotification(
    int rid,
    String emailId,
    int checkInTime,
    int checkOutTime,
    String city,
    boolean confirmed,
    java.util.List<Slot> slotList)
  {
    this();
    this.rid = rid;
    setRidIsSet(true);
    this.emailId = emailId;
    this.checkInTime = checkInTime;
    setCheckInTimeIsSet(true);
    this.checkOutTime = checkOutTime;
    setCheckOutTimeIsSet(true);
    this.city = city;
    this.confirmed = confirmed;
    setConfirmedIsSet(true);
    this.slotList = slotList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReservationNotification(ReservationNotification other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rid = other.rid;
    if (other.isSetEmailId()) {
      this.emailId = other.emailId;
    }
    this.checkInTime = other.checkInTime;
    this.checkOutTime = other.checkOutTime;
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.confirmed = other.confirmed;
    if (other.isSetSlotList()) {
      java.util.List<Slot> __this__slotList = new java.util.ArrayList<Slot>(other.slotList.size());
      for (Slot other_element : other.slotList) {
        __this__slotList.add(new Slot(other_element));
      }
      this.slotList = __this__slotList;
    }
  }

  public ReservationNotification deepCopy() {
    return new ReservationNotification(this);
  }

  @Override
  public void clear() {
    setRidIsSet(false);
    this.rid = 0;
    this.emailId = null;
    setCheckInTimeIsSet(false);
    this.checkInTime = 0;
    setCheckOutTimeIsSet(false);
    this.checkOutTime = 0;
    this.city = null;
    setConfirmedIsSet(false);
    this.confirmed = false;
    this.slotList = null;
  }

  public int getRid() {
    return this.rid;
  }

  public ReservationNotification setRid(int rid) {
    this.rid = rid;
    setRidIsSet(true);
    return this;
  }

  public void unsetRid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RID_ISSET_ID);
  }

  /** Returns true if field rid is set (has been assigned a value) and false otherwise */
  public boolean isSetRid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RID_ISSET_ID);
  }

  public void setRidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getEmailId() {
    return this.emailId;
  }

  public ReservationNotification setEmailId(@org.apache.thrift.annotation.Nullable String emailId) {
    this.emailId = emailId;
    return this;
  }

  public void unsetEmailId() {
    this.emailId = null;
  }

  /** Returns true if field emailId is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailId() {
    return this.emailId != null;
  }

  public void setEmailIdIsSet(boolean value) {
    if (!value) {
      this.emailId = null;
    }
  }

  public int getCheckInTime() {
    return this.checkInTime;
  }

  public ReservationNotification setCheckInTime(int checkInTime) {
    this.checkInTime = checkInTime;
    setCheckInTimeIsSet(true);
    return this;
  }

  public void unsetCheckInTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKINTIME_ISSET_ID);
  }

  /** Returns true if field checkInTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckInTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKINTIME_ISSET_ID);
  }

  public void setCheckInTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKINTIME_ISSET_ID, value);
  }

  public int getCheckOutTime() {
    return this.checkOutTime;
  }

  public ReservationNotification setCheckOutTime(int checkOutTime) {
    this.checkOutTime = checkOutTime;
    setCheckOutTimeIsSet(true);
    return this;
  }

  public void unsetCheckOutTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKOUTTIME_ISSET_ID);
  }

  /** Returns true if field checkOutTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckOutTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKOUTTIME_ISSET_ID);
  }

  public void setCheckOutTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKOUTTIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getCity() {
    return this.city;
  }

  public ReservationNotification setCity(@org.apache.thrift.annotation.Nullable String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public boolean isConfirmed() {
    return this.confirmed;
  }

  public ReservationNotification setConfirmed(boolean confirmed) {
    this.confirmed = confirmed;
    setConfirmedIsSet(true);
    return this;
  }

  public void unsetConfirmed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONFIRMED_ISSET_ID);
  }

  /** Returns true if field confirmed is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONFIRMED_ISSET_ID);
  }

  public void setConfirmedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONFIRMED_ISSET_ID, value);
  }

  public int getSlotListSize() {
    return (this.slotList == null) ? 0 : this.slotList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Slot> getSlotListIterator() {
    return (this.slotList == null) ? null : this.slotList.iterator();
  }

  public void addToSlotList(Slot elem) {
    if (this.slotList == null) {
      this.slotList = new java.util.ArrayList<Slot>();
    }
    this.slotList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Slot> getSlotList() {
    return this.slotList;
  }

  public ReservationNotification setSlotList(@org.apache.thrift.annotation.Nullable java.util.List<Slot> slotList) {
    this.slotList = slotList;
    return this;
  }

  public void unsetSlotList() {
    this.slotList = null;
  }

  /** Returns true if field slotList is set (has been assigned a value) and false otherwise */
  public boolean isSetSlotList() {
    return this.slotList != null;
  }

  public void setSlotListIsSet(boolean value) {
    if (!value) {
      this.slotList = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case RID:
      if (value == null) {
        unsetRid();
      } else {
        setRid((Integer)value);
      }
      break;

    case EMAIL_ID:
      if (value == null) {
        unsetEmailId();
      } else {
        setEmailId((String)value);
      }
      break;

    case CHECK_IN_TIME:
      if (value == null) {
        unsetCheckInTime();
      } else {
        setCheckInTime((Integer)value);
      }
      break;

    case CHECK_OUT_TIME:
      if (value == null) {
        unsetCheckOutTime();
      } else {
        setCheckOutTime((Integer)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case CONFIRMED:
      if (value == null) {
        unsetConfirmed();
      } else {
        setConfirmed((Boolean)value);
      }
      break;

    case SLOT_LIST:
      if (value == null) {
        unsetSlotList();
      } else {
        setSlotList((java.util.List<Slot>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RID:
      return getRid();

    case EMAIL_ID:
      return getEmailId();

    case CHECK_IN_TIME:
      return getCheckInTime();

    case CHECK_OUT_TIME:
      return getCheckOutTime();

    case CITY:
      return getCity();

    case CONFIRMED:
      return isConfirmed();

    case SLOT_LIST:
      return getSlotList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RID:
      return isSetRid();
    case EMAIL_ID:
      return isSetEmailId();
    case CHECK_IN_TIME:
      return isSetCheckInTime();
    case CHECK_OUT_TIME:
      return isSetCheckOutTime();
    case CITY:
      return isSetCity();
    case CONFIRMED:
      return isSetConfirmed();
    case SLOT_LIST:
      return isSetSlotList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReservationNotification)
      return this.equals((ReservationNotification)that);
    return false;
  }

  public boolean equals(ReservationNotification that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_rid = true;
    boolean that_present_rid = true;
    if (this_present_rid || that_present_rid) {
      if (!(this_present_rid && that_present_rid))
        return false;
      if (this.rid != that.rid)
        return false;
    }

    boolean this_present_emailId = true && this.isSetEmailId();
    boolean that_present_emailId = true && that.isSetEmailId();
    if (this_present_emailId || that_present_emailId) {
      if (!(this_present_emailId && that_present_emailId))
        return false;
      if (!this.emailId.equals(that.emailId))
        return false;
    }

    boolean this_present_checkInTime = true;
    boolean that_present_checkInTime = true;
    if (this_present_checkInTime || that_present_checkInTime) {
      if (!(this_present_checkInTime && that_present_checkInTime))
        return false;
      if (this.checkInTime != that.checkInTime)
        return false;
    }

    boolean this_present_checkOutTime = true;
    boolean that_present_checkOutTime = true;
    if (this_present_checkOutTime || that_present_checkOutTime) {
      if (!(this_present_checkOutTime && that_present_checkOutTime))
        return false;
      if (this.checkOutTime != that.checkOutTime)
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_confirmed = true;
    boolean that_present_confirmed = true;
    if (this_present_confirmed || that_present_confirmed) {
      if (!(this_present_confirmed && that_present_confirmed))
        return false;
      if (this.confirmed != that.confirmed)
        return false;
    }

    boolean this_present_slotList = true && this.isSetSlotList();
    boolean that_present_slotList = true && that.isSetSlotList();
    if (this_present_slotList || that_present_slotList) {
      if (!(this_present_slotList && that_present_slotList))
        return false;
      if (!this.slotList.equals(that.slotList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + rid;

    hashCode = hashCode * 8191 + ((isSetEmailId()) ? 131071 : 524287);
    if (isSetEmailId())
      hashCode = hashCode * 8191 + emailId.hashCode();

    hashCode = hashCode * 8191 + checkInTime;

    hashCode = hashCode * 8191 + checkOutTime;

    hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
    if (isSetCity())
      hashCode = hashCode * 8191 + city.hashCode();

    hashCode = hashCode * 8191 + ((confirmed) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSlotList()) ? 131071 : 524287);
    if (isSetSlotList())
      hashCode = hashCode * 8191 + slotList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ReservationNotification other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRid()).compareTo(other.isSetRid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rid, other.rid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailId()).compareTo(other.isSetEmailId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailId, other.emailId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckInTime()).compareTo(other.isSetCheckInTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckInTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkInTime, other.checkInTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckOutTime()).compareTo(other.isSetCheckOutTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckOutTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkOutTime, other.checkOutTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmed()).compareTo(other.isSetConfirmed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmed, other.confirmed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlotList()).compareTo(other.isSetSlotList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlotList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slotList, other.slotList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReservationNotification(");
    boolean first = true;

    sb.append("rid:");
    sb.append(this.rid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("emailId:");
    if (this.emailId == null) {
      sb.append("null");
    } else {
      sb.append(this.emailId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkInTime:");
    sb.append(this.checkInTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkOutTime:");
    sb.append(this.checkOutTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmed:");
    sb.append(this.confirmed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("slotList:");
    if (this.slotList == null) {
      sb.append("null");
    } else {
      sb.append(this.slotList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReservationNotificationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReservationNotificationStandardScheme getScheme() {
      return new ReservationNotificationStandardScheme();
    }
  }

  private static class ReservationNotificationStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReservationNotification> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReservationNotification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rid = iprot.readI32();
              struct.setRidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EMAIL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emailId = iprot.readString();
              struct.setEmailIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHECK_IN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkInTime = iprot.readI32();
              struct.setCheckInTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHECK_OUT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkOutTime = iprot.readI32();
              struct.setCheckOutTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONFIRMED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.confirmed = iprot.readBool();
              struct.setConfirmedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SLOT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.slotList = new java.util.ArrayList<Slot>(_list0.size);
                @org.apache.thrift.annotation.Nullable Slot _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Slot();
                  _elem1.read(iprot);
                  struct.slotList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setSlotListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReservationNotification struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RID_FIELD_DESC);
      oprot.writeI32(struct.rid);
      oprot.writeFieldEnd();
      if (struct.emailId != null) {
        oprot.writeFieldBegin(EMAIL_ID_FIELD_DESC);
        oprot.writeString(struct.emailId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHECK_IN_TIME_FIELD_DESC);
      oprot.writeI32(struct.checkInTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHECK_OUT_TIME_FIELD_DESC);
      oprot.writeI32(struct.checkOutTime);
      oprot.writeFieldEnd();
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONFIRMED_FIELD_DESC);
      oprot.writeBool(struct.confirmed);
      oprot.writeFieldEnd();
      if (struct.slotList != null) {
        oprot.writeFieldBegin(SLOT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.slotList.size()));
          for (Slot _iter3 : struct.slotList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReservationNotificationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReservationNotificationTupleScheme getScheme() {
      return new ReservationNotificationTupleScheme();
    }
  }

  private static class ReservationNotificationTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReservationNotification> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReservationNotification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRid()) {
        optionals.set(0);
      }
      if (struct.isSetEmailId()) {
        optionals.set(1);
      }
      if (struct.isSetCheckInTime()) {
        optionals.set(2);
      }
      if (struct.isSetCheckOutTime()) {
        optionals.set(3);
      }
      if (struct.isSetCity()) {
        optionals.set(4);
      }
      if (struct.isSetConfirmed()) {
        optionals.set(5);
      }
      if (struct.isSetSlotList()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetRid()) {
        oprot.writeI32(struct.rid);
      }
      if (struct.isSetEmailId()) {
        oprot.writeString(struct.emailId);
      }
      if (struct.isSetCheckInTime()) {
        oprot.writeI32(struct.checkInTime);
      }
      if (struct.isSetCheckOutTime()) {
        oprot.writeI32(struct.checkOutTime);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetConfirmed()) {
        oprot.writeBool(struct.confirmed);
      }
      if (struct.isSetSlotList()) {
        {
          oprot.writeI32(struct.slotList.size());
          for (Slot _iter4 : struct.slotList)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReservationNotification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.rid = iprot.readI32();
        struct.setRidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.emailId = iprot.readString();
        struct.setEmailIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.checkInTime = iprot.readI32();
        struct.setCheckInTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.checkOutTime = iprot.readI32();
        struct.setCheckOutTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.confirmed = iprot.readBool();
        struct.setConfirmedIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.slotList = new java.util.ArrayList<Slot>(_list5.size);
          @org.apache.thrift.annotation.Nullable Slot _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new Slot();
            _elem6.read(iprot);
            struct.slotList.add(_elem6);
          }
        }
        struct.setSlotListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

